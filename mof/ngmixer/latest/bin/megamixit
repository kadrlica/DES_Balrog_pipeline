#!/usr/bin/env python
"""
    %prog [options] command [run|run_config_file] [coadd_run|release|coadd_run_list_file]
    Process the input coadd tile(s) with a given ngmix run

    Possible commands are:
        setup - setup jobs
        run - run jobs
        rerun - rerun jobs: clean all output files and start jobs again
        collate - combine job outputs into a single file
        verify - verify that all job outputs are present and OK
        clean - clean all outputs from a run
        archive - run after collate to delete intermediate files and tar logs
        link - make symlinks to all final outputs under {run}/output
        collate-link - collate and link the final outputs
        install-mof - install outputs of MOF run to proper spot in DESDATA
        setup-nbrs - setup the nbrs jobs to build the FoFs
        run-nbrs - run the nbrs jobs
"""

from __future__ import print_function
import os
import sys
import meds
import fitsio
import numpy as np
import glob

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("--system",default='shell',
                  help=("name of system for jobs"))

parser.add_option("--queue",default=None,
                  help=("queue to submit to"))

parser.add_option("--extra-cmds",default='',
                  help=("extra commands to run in job script"))

parser.add_option('--noblind',action='store_true',default=False,
                  help="don't blind the catalog")

parser.add_option('--clobber',action='store_true',default=False,
                  help="clobber existing catalog, else skip over")

parser.add_option('--skip-errors',action='store_true',default=False,
                  help="skip over errors")

parser.add_option('--nocompress',action='store_true',default=False,
                  help="do not compress when archiving logs")

parser.add_option("--verbosity", default=0, type=int,
                  help=("set verbosity level"))

parser.add_option("--seed", default=None,type=int,
                  help=("random seed to make seeds for jobs"))

from ngmixer.megamixer import NGMegaMixer
from ngmixer.megamixer import SLACNGMegaMixer,SLACArrayNGMegaMixer
from ngmixer.megamixer import CakeNGMegaMixer
import ngmixer

def main():
    from ngmixer.files import read_yaml

    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    if options.system == 'shell':
        MMixer = NGMegaMixer
    elif options.system == 'slac':
        MMixer = SLACNGMegaMixer
    elif options.system == 'slac-array':
        MMixer = SLACArrayNGMegaMixer
    elif options.system == 'bnl-condor':
        MMixer = ngmixer.megamixer.BNLCondorMegaMixer
    elif options.system == 'cake':
        MMixer = CakeNGMegaMixer
    else:
        raise ValueError("system %s not supported!" % options.system)

    ngmixer.defaults.VERBOSITY.level = options.verbosity

    # get command
    cmd = args[0]
    
    # find the proper configs
    if 'NGMIXER_CONFIG_DIR' in os.environ:
        conf_file = os.path.join(os.environ['NGMIXER_CONFIG_DIR'],
                                 'run_config',
                                 'run-'+args[1]+'.yaml')
        conf_file = os.path.expandvars(conf_file)
    else:
        conf_file = args[1]
    conf = read_yaml(os.path.expandvars(conf_file))    
    conf['run_config'] = conf_file
    
    if 'NGMIXER_CONFIG_DIR' in os.environ:
        run = os.path.basename(conf_file)[4:-5]
        assert run == conf['run'], \
            "Specified run '%s' does not match name in file '%s'!" \
            % (run,conf['run'])

    # get data to process
    coadd_run = args[2]
    if os.path.exists(coadd_run):
        # this is a list of coadd runs
        coadd_runs = []
        for line in open(coadd_run,'r'):
            if len(line.strip()) > 0:
                coadd_runs.append(line.strip())

    else:
        import desdb
        # if this query gives us something, we got a good release
        coadd_runs = desdb.files.get_release_runs(coadd_run)
        if len(coadd_runs) == 0:
            # OK, let's assume this was a run
            coadd_runs = [coadd_run]

    if options.queue is not None:
        conf['queue'] = options.queue

    ngmm = MMixer(conf,extra_cmds=options.extra_cmds,seed=options.seed)

    nrun=len(coadd_runs)

    for i,coadd_run in enumerate(coadd_runs):

        print("%d/%d" % (i+1,nrun),end=' ')

        if cmd == 'setup':
            ngmm.setup_coadd_tile(coadd_run)
        elif cmd == 'run':
            ngmm.run_coadd_tile(coadd_run)
        elif cmd == 'rerun':
            ngmm.rerun_coadd_tile(coadd_run)
        elif cmd == 'collate':
            ngmm.collate_coadd_tile(coadd_run,
                                    verify=False,
                                    blind=not options.noblind,
                                    clobber=options.clobber,
                                    skip_errors=options.skip_errors)
        elif cmd == 'verify':
            ngmm.collate_coadd_tile(coadd_run,
                                    verify=True,
                                    blind=not options.noblind,
                                    clobber=options.clobber,
                                    skip_errors=False)
        elif cmd == 'clean':
            ngmm.clean_coadd_tile(coadd_run)
        elif cmd == 'archive':
            ngmm.archive_coadd_tile(coadd_run,
                                    compress=not options.nocompress)
        elif cmd == 'link':
            ngmm.link_coadd_tile(coadd_run,
                                 verify=False,
                                 blind=not options.noblind,
                                 clobber=options.clobber,
                                 skip_errors=options.skip_errors)
        elif cmd == 'collate-link':
            ngmm.collate_coadd_tile(coadd_run,
                                    verify=False,
                                    blind=not options.noblind,
                                    clobber=options.clobber,
                                    skip_errors=options.skip_errors)
            ngmm.link_coadd_tile(coadd_run,
                                 verify=False,
                                 blind=not options.noblind,
                                 clobber=options.clobber,
                                 skip_errors=options.skip_errors)
        elif cmd == 'install-mof':
            ngmm.install_mof_outputs(coadd_run,
                                    blind=not options.noblind)
        elif cmd == 'setup-nbrs':
            ngmm.setup_nbrs_coadd_tile(coadd_run)
        elif cmd == 'run-nbrs':
            ngmm.run_nbrs_coadd_tile(coadd_run)
        else:
            raise ValueError("cmd %s not valid!" % cmd)


if __name__ == '__main__':
    main()
