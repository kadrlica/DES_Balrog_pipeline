#!/cvmfs/des.opensciencegrid.org/2015_Q2/eeups/SL6/eups/packages/Linux64/python/2.7.9+1/bin/python
"""
    %prog [options] config_file out_file data_file1 data_files2 ...
    Process the input meds file."""
from __future__ import print_function
import os
import sys
import fitsio
from ngmixer.ngmixing import NGMixer
from ngmixer.mofngmixing import MOFNGMixer
import ngmixer

from optparse import OptionParser
parser = OptionParser(__doc__)

parser.add_option("--fof-range",default=None,
                  help=("Inclusive, zero-offset range of FoFs to "
                        "process"))

parser.add_option("--fof-file",default=None,
                  help=("File with FoF definitions."))

parser.add_option("--work-dir", default='.',
                  help=("copy files local for processing.  "
                        "Also write to local files and copy out."))

parser.add_option("--profile", action='store_true',default=False,
                  help=("Profile the code"))

parser.add_option("--make-plots", action='store_true',default=False,
                  help=("make some plots"))

parser.add_option("--seed", default=None,type=int,
                  help=("random seed"))

parser.add_option("--nbrs-file", default=None,
                  help=("file with the neighbors of each object"))

parser.add_option("--mof-file", default=None,
                  help=("file with the MOF fit data for doing nbrs subtraction"))

parser.add_option("--psf-file", default=None,
                  help=("file with PSF images"))

parser.add_option("--psf-map", default=None,
                  help=("file with mapping between image filename and local psf path"))

parser.add_option("--obj-flags", default=None,
                  help=("file with flags for each object; flags != 0 are ignored"))

parser.add_option("--verbosity", default=0,
                  help=("set verbosity level, --verbosity=1 implies verbose=True in config file"))

def get_range(rng_string):
    if rng_string is not None:
        rng = rng_string.split(',')
        rng = [int(i) for i in rng]
    else:
        rng=None

    return rng

if __name__ == '__main__':
    options, args = parser.parse_args(sys.argv[1:])
    if len(args) < 3:
        parser.print_help()
        sys.exit(45)

    config_file=args[0]
    out_file=args[1]
    data_files=args[2:]
    fof_range = get_range(options.fof_range)
    if options.seed is not None:
        seed = options.seed
    else:
        seed = None

    config = ngmixer.files.read_yaml(config_file)

    extra_data = {}
    if options.nbrs_file is not None:
        extra_data['nbrs'] = fitsio.read(options.nbrs_file)

    if options.obj_flags is not None:
        extra_data['obj_flags'] = fitsio.read(options.obj_flags)

    if options.psf_file is not None:
        extra_data['psf_file'] = options.psf_file

    if options.psf_map is not None:
        extra_data['psf_map'] = options.psf_map

    doMOF = config.get('model_nbrs',False)

    if options.mof_file is not None and doMOF:
        extra_data['mof_fit_data'] = fitsio.read(options.mof_file)
        extra_data['mof_nbrs_data'] = fitsio.read(
            options.mof_file,
            ext='nbrs_data',
        )

    verbosity=int(options.verbosity)
    ngmixer.defaults.VERBOSITY.level = verbosity


    if doMOF and options.mof_file is None:
        MOFNGMixer(config_file,
                   data_files,
                   output_file=out_file,
                   fof_range=fof_range,
                   fof_file=options.fof_file,
                   work_dir=options.work_dir,
                   random_seed=seed,
                   extra_data=extra_data,
                   profile=options.profile,
                   make_plots=options.make_plots,
                   verbosity=verbosity,
                   config=config)
    else:
        NGMixer(config_file,
                data_files,
                output_file=out_file,
                fof_range=fof_range,
                fof_file=options.fof_file,
                mof_file=options.mof_file,
                work_dir=options.work_dir,
                random_seed=seed,
                extra_data=extra_data,
                profile=options.profile,
                make_plots=options.make_plots,
                verbosity=verbosity,
                config=config)
