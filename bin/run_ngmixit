#!/cvmfs/des.opensciencegrid.org/2015_Q2/eeups/SL6/eups/packages/Linux64/python/2.7.9+1/bin/python

import argparse
import os
import sys
import time
from despymisc.miscutils import elapsed_time
import subprocess
from ngmixer import ngmixit_tools 

EXE = 'ngmixit'

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Define the inputs for ngmixit and run")

    parser.add_argument("--tilename", type=str, action="store",default=None, required=True,
                        help="Name of tilename to process")
    parser.add_argument("--meds_list", type=str, action="store",default=None, required=True,
                        help="Name of file containing filenames and bands for the input meds")
    parser.add_argument("--bands", type=str, action="store",default=None, required=True, nargs='+',
                        help="Ordered list of bands to use")
    parser.add_argument("--nranges", type=int, action="store",default=None, required=True,
                        help="Number of ranges needed (i.e. number of CPUs)")
    parser.add_argument("--wrange", type=int, action="store",default=None, required=True,
                        help="Which range to use, [0, NRANGES-1]")
    parser.add_argument("--seed_shift", type=str, action="store",default=None, required=False,
                        help="Optional seed shift string of integers")
    parser.add_argument("--dryrun", action="store_true",default=False,
                        help="Just print the command to be executed and exit?")

    ignore_options = ['nranges','wrange','dryrun','tilename','seed_shift','bands','meds_list']
    # Parse the known and extra args (as a list)
    args, unknownargs = parser.parse_known_args()

    # Fix the bands comma separated into a real list
    args.bands = ngmixit_tools.parse_comma_separated_list(args.bands)

    # Get the list of med files
    meds_files = ngmixit_tools.read_meds_list(args.meds_list)
        
    # We need to avoid passing --fof-file if --mof-file is present, it's one or the other
    if '--mof-file' in unknownargs and '--fof-file' in unknownargs:
        print '# "--mof-file" option is present, we will remove "--fof-file" from arguments'
        fof_file_idx = unknownargs.index('--fof-file')
        fof_file = unknownargs[fof_file_idx+1]
        unknownargs.remove(fof_file)
        unknownargs.remove('--fof-file')

    # Extract the fof-file, use this method because of the non-standard '--fof-file' argument
    if '--fof-file' in unknownargs:
        fof_file_idx = unknownargs.index('--fof-file')
        fof_file = unknownargs[fof_file_idx+1]
        # Get the number of objects to fit from fof file
        nfit = ngmixit_tools.find_number_fof(fof_file,ext=1)
    else:
        # We get the nfit from the first band file mof
        nfit = ngmixit_tools.find_number_meds(meds_files[args.bands[0]])

    # Get the job bracketing
    j1,j2 = ngmixit_tools.getrange(args.wrange,nfit,args.nranges)
    print "# Found %s nfit" % nfit
    print "# will run chunk %s, between %s-%s jobs" % (args.wrange,j1,j2)

    # Add the fof-range to the command line
    unknownargs.insert(0,"--fof-range %s,%s" % (j1,j2))

    # Get the seed based on tilename and chunck/wrange and add it to the commandline unknownargs
    seed = ngmixit_tools.chunkseed(args.tilename,args.wrange, shift='')
    unknownargs.insert(1,"--seed %s" % seed)


    # And now we append to unknownargs the meds files
    for band in args.bands:
        unknownargs.append(meds_files[band])


    # Make it a dictionary we can pop items out of it
    dict_args = vars(args)

    # We build the command-list from the known (additional) arguments
    cmdlist = [EXE]
    for key in dict_args:
        if key in ignore_options: continue
        print "# \t--%-10s\t%s" % (key,vars(args)[key])
        cmdlist.append("--%s" % key)
        cmdlist.append(dict_args[key])
    # plus the extra args which are directly passed to ngmixit
    for uarg in unknownargs:
        cmdlist.append(uarg)

    # The full command in one line
    cmd = ' '.join(map(str, cmdlist))
    print "# Will execute:"
    print "# \t%s" % cmd

    # Run the code now
    t0 = time.time()
    status = 0
    if not args.dryrun:
        sys.stdout.flush()
        status = subprocess.call(cmd,shell=True)
    # Done
    print "# NGMIXIT creation time: %s" % elapsed_time(t0)
    sys.exit(status)


